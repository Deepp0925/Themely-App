{"version":3,"sources":["Themes/ThemeProp.tsx","Themes/Theme.tsx","Themes/Color.ts","Themes/EditThemeProp.tsx","Themes/Themes.tsx","Themes/index.tsx","Themes/AddThemeProp.tsx","Json2Css.ts","Download.tsx","Navbar.tsx","Store/Theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThemeProp","Rule","Object","keys","this","props","CSSRules","className","style","backgroundColor","CardColor","onClick","OnDeleteClicked","bind","RuleName","OnEditClicked","color","TextColor","Component","Theme","inject","observer","themeColor","BgColor","DeleteStyle","ThemeColor","BackgroundColor","first","Style","map","_ThemeProp","i","OpenEdit","key","Hex3ToHex6","hex","length","RGB","trim","split","R","G","B","Modal","setAppElement","EditThemeProp","PropNameRef","React","createRef","CSSRuleRef","DarkInputRef","DarkColorRef","LightInputRef","LightColorRef","state","IsOpen","ClassName","setState","AddStyle","prop","current","value","DarkValue","LightValue","CloseModal","console","log","dark","light","evt","val","currentTarget","CssRule","isOpen","onRequestClose","shouldCloseOnEsc","shouldCloseOnOverlayClick","overlayClassName","contentLabel","placeholder","defaultValue","ref","name","id","onChange","AdjustDarkInput","type","AdjustDarkColor","AdjustLightInput","AdjustLightColor","EditProp","Themes","EditPropRef","OpenModal","setTimeout","SetClassName","Fragment","_Theme","OpenEditModal","Themer","AddThemeProp","AddProp","JSON2CSS","jsonData","selector","toString","def","selectorRules","rule","join","Data","Props","error","Download","_Blob","Blob","JSON","stringify","saveAs","Json2CSS","CssifyJson","DownloadCSS","DownloadJSON","Navbar","AddModalRef","DownloadModalRef","OpenAddModal","OpenDownloadModal","observable","BgThemed","TextThemed","computed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6e9eb11.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\ninterface ThemePropProps {\n  CardColor: string;\n  TextColor: string;\n  CSSRules: object;\n  RuleName: string;\n  OnEditClicked: (RuleName: string) => void;\n  OnDeleteClicked: (className: string) => void;\n}\n\nclass ThemeProp extends Component<ThemePropProps> {\n  render() {\n    const Rule = Object.keys(this.props.CSSRules)[0];\n    return (\n      <div\n        className=\"SectionCard shadow-xl scale-up-center\"\n        style={{ backgroundColor: this.props.CardColor }}\n      >\n        <div\n          className=\"DeleteWrapper\"\n          onClick={this.props.OnDeleteClicked.bind(this, this.props.RuleName)}\n        >\n          <i className=\"fas fa-trash-alt\"></i>\n        </div>\n        <div\n          className=\"EditWrapper\"\n          onClick={this.props.OnEditClicked.bind(this, this.props.RuleName)}\n        >\n          <i className=\"fas fa-pen\" style={{ color: this.props.TextColor }} />\n        </div>\n        <div className=\"RuleName\">\n          <h3 style={{ color: this.props.TextColor }}>{this.props.RuleName}</h3>\n        </div>\n        <div className=\"PropWrapper\">\n          <p style={{ color: this.props.TextColor }}>\n            {Rule}: {this.props.CSSRules[Rule]}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ThemeProp;\n","import React, { Component } from \"react\";\nimport ThemeProp from \"./ThemeProp\";\nimport { ThemeStore } from \"../Store/Theme\";\nimport { inject, observer } from \"mobx-react\";\n\ninterface ThemeProps {\n  themeColor: any;\n  first?: any;\n  Theme?: ThemeStore;\n  OpenEdit: (className: string) => void;\n}\n\n@inject(\"Theme\")\n@observer\nclass Theme extends Component<ThemeProps> {\n  private BackgroundColor(): {\n    BgColor: string;\n    CardColor: string;\n    TextColor: string;\n  } {\n    switch (this.props.themeColor) {\n      case \"dark\":\n        return {\n          BgColor: \"#222\",\n          CardColor: \"#424242\",\n          TextColor: \"#fff\"\n        };\n      case \"light\":\n        return {\n          BgColor: \"#fff\",\n          CardColor: \"#EAEAEA\",\n          TextColor: \"#222\"\n        };\n\n      default:\n        return {\n          BgColor: \"#fff\",\n          CardColor: \"#ececec\",\n          TextColor: \"#222\"\n        };\n    }\n  }\n\n  private DeleteStyle(className: string) {\n    this.props.Theme.DeleteStyle = className;\n  }\n\n  render() {\n    const ThemeColor = this.BackgroundColor();\n    return (\n      <div\n        className={`Section ${this.props.first ? \"FirstSection\" : \"\"}`}\n        style={{ backgroundColor: ThemeColor.BgColor }}\n      >\n        <div className=\"SectionHeader\">\n          <h3 style={{ color: ThemeColor.TextColor }}>\n            {this.props.themeColor}\n          </h3>\n        </div>\n        <div className=\"SectionCards\">\n          {Object.keys(this.props.Theme.Style[this.props.themeColor]).map(\n            (_ThemeProp, i) => (\n              <ThemeProp\n                OnEditClicked={this.props.OpenEdit}\n                OnDeleteClicked={this.DeleteStyle.bind(this)}\n                key={i}\n                TextColor={ThemeColor.TextColor}\n                CardColor={ThemeColor.CardColor}\n                RuleName={_ThemeProp}\n                CSSRules={\n                  this.props.Theme.Style[this.props.themeColor][_ThemeProp]\n                }\n              />\n            )\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Theme;\n","export function Hex3ToHex6(hex: string): string {\n  if (hex.length === 4) {\n    hex = hex.trim();\n    const RGB = hex.split(\"\");\n    const R = RGB[1];\n    const G = RGB[2];\n    const B = RGB[3];\n    return `#${R}${R}${G}${G}${B}${B}`;\n  }\n\n  return hex;\n}\n","import React, { Component } from \"react\";\nimport Modal from \"react-modal\";\nimport { inject, observer } from \"mobx-react\";\nimport { ThemeStore } from \"../Store/Theme\";\nimport { Hex3ToHex6 } from \"./Color\";\n\ninterface EditThemeState {\n  IsOpen: boolean;\n  ClassName: string;\n}\n\ninterface EditThemePropProps {\n  Theme?: ThemeStore;\n}\n\nModal.setAppElement(\"#root\");\n\n@inject(\"Theme\")\n@observer\nclass EditThemeProp extends Component<EditThemePropProps, EditThemeState> {\n  private PropNameRef: React.RefObject<HTMLInputElement> = React.createRef();\n  private CSSRuleRef: React.RefObject<HTMLSelectElement> = React.createRef();\n  private DarkInputRef: React.RefObject<HTMLInputElement> = React.createRef();\n  private DarkColorRef: React.RefObject<HTMLInputElement> = React.createRef();\n  private LightInputRef: React.RefObject<HTMLInputElement> = React.createRef();\n  private LightColorRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      IsOpen: false,\n      ClassName: \"\"\n    };\n  }\n\n  CloseModal() {\n    this.setState({\n      IsOpen: false\n    });\n  }\n\n  OpenModal() {\n    this.setState({\n      IsOpen: true\n    });\n  }\n\n  EditProp() {\n    this.props.Theme.AddStyle = {\n      prop: this.PropNameRef.current.value,\n      DarkValue: {\n        [this.CSSRuleRef.current.value]: this.DarkColorRef.current.value\n      },\n      LightValue: {\n        [this.CSSRuleRef.current.value]: this.LightColorRef.current.value\n      }\n    };\n\n    this.CloseModal();\n    console.log(this.props.Theme.Style.dark, this.props.Theme.Style.light);\n  }\n\n  AdjustDarkInput(evt: React.ChangeEvent<HTMLInputElement>) {\n    const val = evt.currentTarget.value;\n    if (val.length === 7 || val.length === 4) {\n      this.DarkColorRef.current.value = Hex3ToHex6(val);\n    }\n  }\n\n  AdjustDarkColor(evt: React.ChangeEvent<HTMLInputElement>) {\n    this.DarkInputRef.current.value = evt.currentTarget.value;\n  }\n\n  AdjustLightInput(evt: React.ChangeEvent<HTMLInputElement>) {\n    const val = evt.currentTarget.value;\n    if (val.length === 7 || val.length === 4) {\n      this.LightColorRef.current.value = Hex3ToHex6(val);\n    }\n  }\n\n  AdjustLightColor(evt: React.ChangeEvent<HTMLInputElement>) {\n    this.LightInputRef.current.value = evt.currentTarget.value;\n  }\n\n  SetClassName(className: string) {\n    this.setState({\n      ClassName: className\n    });\n\n    const CssRule = Object.keys(this.props.Theme.Style.dark[className])[0];\n    this.PropNameRef.current.value = className;\n\n    this.CSSRuleRef.current.value = CssRule;\n\n    const DarkValue = Hex3ToHex6(\n      this.props.Theme.Style.dark[className][CssRule]\n    );\n    this.DarkColorRef.current.value = DarkValue;\n    this.DarkInputRef.current.value = DarkValue;\n\n    const LightValue = Hex3ToHex6(\n      this.props.Theme.Style.light[className][CssRule]\n    );\n\n    this.LightColorRef.current.value = LightValue;\n    this.LightInputRef.current.value = LightValue;\n  }\n\n  render() {\n    return (\n      <Modal\n        isOpen={this.state.IsOpen}\n        onRequestClose={this.CloseModal.bind(this)}\n        shouldCloseOnEsc\n        shouldCloseOnOverlayClick\n        className=\"Modal\"\n        overlayClassName=\"ModalOverlay\"\n        contentLabel=\"Edit Theme\"\n      >\n        <div className=\"Header\">\n          <h3 className=\"Thin-Text\">Edit Theme</h3>\n        </div>\n\n        <div className=\"Content\">\n          <div className=\"PropName\">\n            <input\n              placeholder=\"Property Name\"\n              className=\"PropNameInput\"\n              defaultValue=\"ClassName\"\n              ref={this.PropNameRef}\n            />\n          </div>\n          <div className=\"SelectRule\">\n            <select name=\"slct\" id=\"slct\" ref={this.CSSRuleRef}>\n              <option value=\"background-color\">background-color</option>\n              <option value=\"color\">color</option>\n            </select>\n          </div>\n\n          <div className=\"ThemeColors\">\n            <div className=\"ThemeName\">\n              <h4 className=\"Thin-Text\">Dark</h4>\n            </div>\n            <div className=\"ThemeColorValue\">\n              <input\n                placeholder=\"Property Name\"\n                className=\"PropNameInput\"\n                defaultValue=\"#000\"\n                ref={this.DarkInputRef}\n                onChange={this.AdjustDarkInput.bind(this)}\n              />\n            </div>\n            <div className=\"ThemeColorPicker\">\n              <input\n                type=\"color\"\n                ref={this.DarkColorRef}\n                onChange={this.AdjustDarkColor.bind(this)}\n              />\n            </div>\n          </div>\n\n          <div className=\"ThemeColors\">\n            <div className=\"ThemeName\">\n              <h4 className=\"Thin-Text\">Light</h4>\n            </div>\n            <div className=\"ThemeColorValue\">\n              <input\n                placeholder=\"Property Name\"\n                className=\"PropNameInput\"\n                defaultValue=\"#000\"\n                ref={this.LightInputRef}\n                onChange={this.AdjustLightInput.bind(this)}\n              />\n            </div>\n            <div className=\"ThemeColorPicker\">\n              <input\n                type=\"color\"\n                ref={this.LightColorRef}\n                onChange={this.AdjustLightColor.bind(this)}\n              />\n            </div>\n          </div>\n\n          <div className=\"EditThemeBtnWrapper\">\n            <button onClick={this.EditProp.bind(this)}>Update</button>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default EditThemeProp;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { ThemeStore } from \"../Store/Theme\";\nimport Theme from \"./Theme\";\nimport EditThemeProp from \"./EditThemeProp\";\n\ninterface ThemesProps {\n  Theme?: ThemeStore;\n}\n\n@inject(\"Theme\")\n@observer\nclass Themes extends Component<ThemesProps> {\n  private EditPropRef: React.RefObject<EditThemeProp> = React.createRef();\n\n  private OpenEditModal(className: string) {\n    this.EditPropRef.current.OpenModal();\n    setTimeout(() => this.EditPropRef.current.SetClassName(className), 0);\n  }\n\n  render() {\n    const Themes = Object.keys(this.props.Theme.Style);\n    return (\n      <React.Fragment>\n        <EditThemeProp ref={this.EditPropRef} />\n        {Themes.map((_Theme, i) => (\n          <Theme\n            themeColor={Themes[i]}\n            key={i}\n            first={i === 0}\n            OpenEdit={this.OpenEditModal.bind(this)}\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Themes;\n","import React, { Component } from \"react\";\nimport \"./Theme.scss\";\nimport Themes from \"./Themes\";\n\nclass Themer extends Component {\n  render() {\n    return (\n      <div>\n        <Themes />\n      </div>\n    );\n  }\n}\n\nexport default Themer;\n","import React, { Component } from \"react\";\nimport Modal from \"react-modal\";\nimport { inject, observer } from \"mobx-react\";\nimport { ThemeStore } from \"../Store/Theme\";\nimport { Hex3ToHex6 } from \"./Color\";\n\ninterface AddThemeState {\n  IsOpen: boolean;\n}\n\ninterface AddThemePropProps {\n  Theme?: ThemeStore;\n}\n\nModal.setAppElement(\"#root\");\n\n@inject(\"Theme\")\n@observer\nclass AddThemeProp extends Component<AddThemePropProps, AddThemeState> {\n  private PropNameRef: React.RefObject<HTMLInputElement> = React.createRef();\n  private CSSRuleRef: React.RefObject<HTMLSelectElement> = React.createRef();\n  private DarkInputRef: React.RefObject<HTMLInputElement> = React.createRef();\n  private DarkColorRef: React.RefObject<HTMLInputElement> = React.createRef();\n  private LightInputRef: React.RefObject<HTMLInputElement> = React.createRef();\n  private LightColorRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      IsOpen: false\n    };\n  }\n\n  CloseModal() {\n    this.setState({\n      IsOpen: false\n    });\n  }\n\n  OpenModal() {\n    this.setState({\n      IsOpen: true\n    });\n  }\n\n  AddProp() {\n    this.props.Theme.AddStyle = {\n      prop: this.PropNameRef.current.value,\n      DarkValue: {\n        [this.CSSRuleRef.current.value]: this.DarkColorRef.current.value\n      },\n      LightValue: {\n        [this.CSSRuleRef.current.value]: this.LightColorRef.current.value\n      }\n    };\n\n    this.CloseModal();\n    console.log(this.props.Theme.Style.dark, this.props.Theme.Style.light);\n  }\n\n  AdjustDarkInput(evt: React.ChangeEvent<HTMLInputElement>) {\n    const val = evt.currentTarget.value;\n    if (val.length === 7 || val.length === 4) {\n      this.DarkColorRef.current.value = Hex3ToHex6(val);\n    }\n  }\n\n  AdjustDarkColor(evt: React.ChangeEvent<HTMLInputElement>) {\n    this.DarkInputRef.current.value = evt.currentTarget.value;\n  }\n\n  AdjustLightInput(evt: React.ChangeEvent<HTMLInputElement>) {\n    const val = evt.currentTarget.value;\n    if (val.length === 7 || val.length === 4) {\n      this.LightColorRef.current.value = Hex3ToHex6(val);\n    }\n  }\n\n  AdjustLightColor(evt: React.ChangeEvent<HTMLInputElement>) {\n    this.LightInputRef.current.value = evt.currentTarget.value;\n  }\n\n  render() {\n    return (\n      <Modal\n        isOpen={this.state.IsOpen}\n        onRequestClose={this.CloseModal.bind(this)}\n        shouldCloseOnEsc\n        shouldCloseOnOverlayClick\n        className=\"Modal\"\n        overlayClassName=\"ModalOverlay\"\n        contentLabel=\"Add Theme\"\n      >\n        <div className=\"Header\">\n          <h3 className=\"Thin-Text\">Add Theme</h3>\n        </div>\n\n        <div className=\"Content\">\n          <div className=\"PropName\">\n            <input\n              placeholder=\"Property Name\"\n              className=\"PropNameInput\"\n              defaultValue=\"ClassName\"\n              ref={this.PropNameRef}\n            />\n          </div>\n          <div className=\"SelectRule\">\n            <select name=\"slct\" id=\"slct\" ref={this.CSSRuleRef}>\n              <option value=\"background-color\">background-color</option>\n              <option value=\"color\">color</option>\n            </select>\n          </div>\n\n          <div className=\"ThemeColors\">\n            <div className=\"ThemeName\">\n              <h4 className=\"Thin-Text\">Dark</h4>\n            </div>\n            <div className=\"ThemeColorValue\">\n              <input\n                placeholder=\"Property Name\"\n                className=\"PropNameInput\"\n                defaultValue=\"#000\"\n                ref={this.DarkInputRef}\n                onChange={this.AdjustDarkInput.bind(this)}\n              />\n            </div>\n            <div className=\"ThemeColorPicker\">\n              <input\n                type=\"color\"\n                ref={this.DarkColorRef}\n                onChange={this.AdjustDarkColor.bind(this)}\n              />\n            </div>\n          </div>\n\n          <div className=\"ThemeColors\">\n            <div className=\"ThemeName\">\n              <h4 className=\"Thin-Text\">Light</h4>\n            </div>\n            <div className=\"ThemeColorValue\">\n              <input\n                placeholder=\"Property Name\"\n                className=\"PropNameInput\"\n                defaultValue=\"#000\"\n                ref={this.LightInputRef}\n                onChange={this.AdjustLightInput.bind(this)}\n              />\n            </div>\n            <div className=\"ThemeColorPicker\">\n              <input\n                type=\"color\"\n                ref={this.LightColorRef}\n                onChange={this.AdjustLightColor.bind(this)}\n              />\n            </div>\n          </div>\n\n          <div className=\"AddThemeBtnWrapper\">\n            <button onClick={this.AddProp.bind(this)}>Add</button>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default AddThemeProp;\n","export interface IThemeProps {\n  BgThemed: object;\n  TextThemed: object;\n  [x: string]: object;\n}\n\nexport interface IThemeJson {\n  dark?: IThemeProps;\n  light?: IThemeProps;\n  [x: string]: IThemeProps;\n}\n\nexport default class JSON2CSS {\n  static Json2CSS(jsonData: object): string {\n    // get all selectors\n    const selectors = Object.keys(jsonData);\n    return selectors\n      .map(selector => {\n        // converting to string so\n        selector = selector.toString();\n        const def = jsonData[selector];\n        // individual rules\n        // eg: background-color: grey;\n        const rules = Object.keys(def);\n        const selectorRules = rules\n          .map(rule => {\n            // add indentation\n            return `\\t${rule}:${def[rule]}`;\n          })\n          .join(\";\\n\"); // every rule on new line\n        return `${selector}{\\n${selectorRules}\\n}`;\n      })\n      .join(\"\\n\\n\");\n  }\n\n  static CssifyJson(Data: IThemeJson): object {\n    const Style = {};\n    try {\n      const Themes = Object.keys(Data);\n\n      Themes.map(Theme => {\n        const Props = Data[Theme];\n        const PropKeys = Object.keys(Props);\n\n        PropKeys.map(prop => {\n          Style[`body[data-theme=${Theme}] .${prop}`] = Props[prop];\n        });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    return Style;\n  }\n}\n","import React, { Component } from \"react\";\nimport Modal from \"react-modal\";\nimport { inject, observer } from \"mobx-react\";\nimport { ThemeStore } from \"./Store/Theme\";\nimport { saveAs } from \"file-saver\";\nimport JSON2CSS from \"./Json2Css\";\n\ninterface DownloadState {\n  IsOpen: boolean;\n}\n\ninterface DownloadProps {\n  Theme?: ThemeStore;\n}\n\nModal.setAppElement(\"#root\");\n\n@inject(\"Theme\")\n@observer\nclass Download extends Component<DownloadProps, DownloadState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      IsOpen: false\n    };\n  }\n\n  CloseModal() {\n    this.setState({\n      IsOpen: false\n    });\n  }\n\n  OpenModal() {\n    this.setState({\n      IsOpen: true\n    });\n  }\n\n  private DownloadJSON() {\n    const _Blob = new Blob([JSON.stringify(this.props.Theme.Style)]);\n    saveAs(_Blob, \"Theme.json\");\n  }\n\n  private DownloadCSS() {\n    const _Blob = new Blob([\n      JSON2CSS.Json2CSS(JSON2CSS.CssifyJson(this.props.Theme.Style))\n    ]);\n    saveAs(_Blob, \"Theme.css\");\n  }\n\n  render() {\n    return (\n      <Modal\n        isOpen={this.state.IsOpen}\n        onRequestClose={this.CloseModal.bind(this)}\n        shouldCloseOnEsc\n        shouldCloseOnOverlayClick\n        className=\"Modal\"\n        overlayClassName=\"ModalOverlay\"\n        contentLabel=\"Add Theme\"\n      >\n        <div className=\"Header\">\n          <h3 className=\"Thin-Text\">Download</h3>\n        </div>\n\n        <div className=\"Content\">\n          <div className=\"DownloadAsCSS\">\n            <button onClick={this.DownloadCSS.bind(this)}>\n              Download CSS File\n            </button>\n          </div>\n          <div className=\"DownloadAsJSON\">\n            <button onClick={this.DownloadJSON.bind(this)}>\n              Download JSON File\n            </button>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default Download;\n","import React, { Component } from \"react\";\nimport AddThemeProp from \"./Themes/AddThemeProp\";\nimport Download from \"./Download\";\n\nclass Navbar extends Component {\n  private AddModalRef = React.createRef<AddThemeProp>();\n  private DownloadModalRef = React.createRef<Download>();\n  private OpenAddModal() {\n    this.AddModalRef.current.OpenModal();\n  }\n\n  private OpenDownloadModal() {\n    this.DownloadModalRef.current.OpenModal();\n  }\n\n  render() {\n    return (\n      <div className=\"Navbar\">\n        <div className=\"AppNameWrapper\">\n          <h2 className=\"AppName\">Themely</h2>\n        </div>\n        <div className=\"AddProp\">\n          <button onClick={this.OpenAddModal.bind(this)}>\n            <i className=\"fas fa-plus\"></i>\n          </button>\n          <AddThemeProp ref={this.AddModalRef} />\n        </div>\n\n        <div className=\"DownloadBtn\">\n          <button onClick={this.OpenDownloadModal.bind(this)}>\n            <i className=\"fas fa-file-export\"></i>\n          </button>\n          <Download ref={this.DownloadModalRef} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import { observable, computed } from \"mobx\";\nimport { IThemeJson } from \"../interface\";\nexport class ThemeStore {\n  @observable private Theme: IThemeJson = {\n    light: {\n      BgThemed: {\n        \"background-color\": \"#fff\"\n      },\n      TextThemed: {\n        color: \"#222\"\n      }\n    },\n    dark: {\n      BgThemed: {\n        \"background-color\": \"#222\"\n      },\n      TextThemed: {\n        color: \"#fff\"\n      }\n    }\n  };\n\n  set AddStyle(prop: { prop: string; DarkValue: object; LightValue: object }) {\n    this.Theme.dark[prop.prop] = prop.DarkValue;\n    this.Theme.light[prop.prop] = prop.LightValue;\n  }\n\n  @computed get Style(): IThemeJson {\n    return this.Theme;\n  }\n\n  set DeleteStyle(ClassName: string) {\n    delete this.Theme.dark[ClassName];\n    delete this.Theme.light[ClassName];\n  }\n}\n\nexport default new ThemeStore();\n","import React from \"react\";\nimport \"./App.scss\";\nimport Themer from \"./Themes\";\nimport Navbar from \"./Navbar\";\nimport { Provider } from \"mobx-react\";\nimport Theme from \"./Store/Theme\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider Theme={Theme}>\n      <div className=\"App\">\n        <Navbar />\n        <Themer />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}